package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.actor.testapplication.utils.String2DateConverter;
import java.util.Date;

import com.actor.testapplication.bean.BirthItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "birthday".
*/
public class BirthItemDao extends AbstractDao<BirthItem, Long> {

    public static final String TABLENAME = "birthday";

    /**
     * Properties of entity BirthItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Gender = new Property(2, boolean.class, "gender", false, "gender");
        public final static Property LunarCalendar = new Property(3, String.class, "lunarCalendar", false, "lunar_calendar");
        public final static Property BirthdayDate = new Property(4, String.class, "birthdayDate", false, "birthday_date");
        public final static Property Birthday = new Property(5, String.class, "birthday", false, "birthday_str");
        public final static Property ChineseZodiac = new Property(6, String.class, "chineseZodiac", false, "chinese_zodiac");
        public final static Property Zodiac = new Property(7, String.class, "zodiac", false, "zodiac");
    }

    private final String2DateConverter lunarCalendarConverter = new String2DateConverter();
    private final String2DateConverter birthdayDateConverter = new String2DateConverter();

    public BirthItemDao(DaoConfig config) {
        super(config);
    }
    
    public BirthItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BirthItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getGender() ? 1L: 0L);
 
        Date lunarCalendar = entity.getLunarCalendar();
        if (lunarCalendar != null) {
            stmt.bindString(4, lunarCalendarConverter.convertToDatabaseValue(lunarCalendar));
        }
 
        Date birthdayDate = entity.getBirthdayDate();
        if (birthdayDate != null) {
            stmt.bindString(5, birthdayDateConverter.convertToDatabaseValue(birthdayDate));
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(6, birthday);
        }
 
        String chineseZodiac = entity.getChineseZodiac();
        if (chineseZodiac != null) {
            stmt.bindString(7, chineseZodiac);
        }
 
        String zodiac = entity.getZodiac();
        if (zodiac != null) {
            stmt.bindString(8, zodiac);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BirthItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getGender() ? 1L: 0L);
 
        Date lunarCalendar = entity.getLunarCalendar();
        if (lunarCalendar != null) {
            stmt.bindString(4, lunarCalendarConverter.convertToDatabaseValue(lunarCalendar));
        }
 
        Date birthdayDate = entity.getBirthdayDate();
        if (birthdayDate != null) {
            stmt.bindString(5, birthdayDateConverter.convertToDatabaseValue(birthdayDate));
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(6, birthday);
        }
 
        String chineseZodiac = entity.getChineseZodiac();
        if (chineseZodiac != null) {
            stmt.bindString(7, chineseZodiac);
        }
 
        String zodiac = entity.getZodiac();
        if (zodiac != null) {
            stmt.bindString(8, zodiac);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BirthItem readEntity(Cursor cursor, int offset) {
        BirthItem entity = new BirthItem();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BirthItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGender(cursor.getShort(offset + 2) != 0);
        entity.setLunarCalendar(cursor.isNull(offset + 3) ? null : lunarCalendarConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setBirthdayDate(cursor.isNull(offset + 4) ? null : birthdayDateConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setBirthday(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChineseZodiac(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZodiac(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BirthItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BirthItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BirthItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
