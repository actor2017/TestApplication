apply plugin: 'com.android.application'

android {

    compileSdkVersion 29
    ndkVersion '21.0.6113669'

    defaultConfig {
        applicationId "com.actor.testapplication"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 19102101
        versionName "1.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        /**
         * 1. 两个字段的作用
         * -frtti：如果您希望支持 RTTI，Gradle 会将其传递到 CMake。
         * -fexceptions：启用对 C++ 异常处理的支持，Gradle 会将其传递到 CMake。
         */
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
            }
        }
        //2.不写也可以
        ndk {
//            moduleName 'native-lib'//moduleName要与CMakeLists.txt中add_library定义的libraryName一致
//            //指定本机的ABI配置,类库应该与APK一起构建和打包。
//            abiFilters 'armeabi', 'armeabi-v7a', 'x86', 'x86_64', 'arm64-v8a', 'mips', 'mips64'

//            ldLibs "log"
            ldLibs "jnigraphics"//增加动态链接库 jnigraphics
        }
    }
    signingConfigs {
        release {
            keyAlias 'actor'
            keyPassword '123456'
            storeFile file('actorKey.jks')
            storePassword '123456'
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release//debug 使用 release 签名
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //3.添加so库,与buildTypes { 同级
    sourceSets{
        main{
            jniLibs.srcDirs = ['libs']
        }
    }

    //4.编译成linux环境下可执行的.so文件
    externalNativeBuild {
        //CMake一款外部构建工具,可与Gradle搭配使用来构建原生库.如果您只计划使用ndk-build,则不需要此组件.
        cmake {
            path "CMakeLists.txt"
        }

        //使用NDK的方式编译,编译时到这个文件下找到.c文件位置(一般用上面种cmake编译方式)
//        ndkBuild {
//            path "Android.mk"
//        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //打包
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "Test_${versionName}.apk"
        }
    }
}

repositories {//aar包
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    //https://github.com/JakeWharton/butterknife
    implementation 'com.jakewharton:butterknife:10.2.3'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'

    //https://gitee.com/actor20170211030627/MyAndroidFrameWork
    implementation 'com.gitee.actor20170211030627.MyAndroidFrameWork:myandroidframework:2.0.4.1'

    //https://github.com/franmontiel/PersistentCookieJar Okhttp3的Cookie
    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'

    //https://github.com/ReactiveX/RxJava
    implementation 'io.reactivex.rxjava3:rxjava:3.0.0-RC2'
//
//    //https://github.com/ReactiveX/RxAndroid
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    //https://github.com/Esri/arcgis-runtime-samples-android 地图
    compileOnly 'com.esri.arcgisruntime:arcgis-android:100.4.0'
}

//创建一个任务
task('helloworld', {//参2: 配置闭包
    println 'configure'

    doLast {
        println 'Executing task'
    }
})