apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    /**
     *
     */
    ndkVersion '21.0.6113669'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        consumerProguardFiles "consumer-rules.pro"

        /**
         * 1. 两个字段的作用
         * -frtti：如果您希望支持 RTTI，Gradle 会将其传递到 CMake。
         * -fexceptions：启用对 C++ 异常处理的支持，Gradle 会将其传递到 CMake。
         */
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
            }
        }
        //2.不写也可以
        ndk {
//            moduleName 'native-lib'//moduleName要与CMakeLists.txt中add_library定义的libraryName一致
//            //指定本机的ABI配置,类库应该与APK一起构建和打包。
//            abiFilters 'armeabi', 'armeabi-v7a', 'x86', 'x86_64', 'arm64-v8a', 'mips', 'mips64'

//            ldLibs "log"
            ldLibs "jnigraphics"//增加动态链接库 jnigraphics
        }
    }


    //3.添加so库,与buildTypes { 同级
    sourceSets{
        main{
            jniLibs.srcDirs = ['libs']
        }
    }

    //4.编译成linux环境下可执行的.so文件
    externalNativeBuild {
        //CMake一款外部构建工具,可与Gradle搭配使用来构建原生库.如果您只计划使用ndk-build,则不需要此组件.
        cmake {
            path "CMakeLists.txt"
        }

        //使用Eclipse, 编译时到这个文件下找到.c文件位置(一般用上面种cmake编译方式)
//        ndkBuild {
//            path "Android.mk"
//        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
}